// Generated by jextract

package com.loadingbyte.credgen.natives.skcms;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct skcms_CICP {
 *     uint8_t color_primaries;
 *     uint8_t transfer_characteristics;
 *     uint8_t matrix_coefficients;
 *     uint8_t video_full_range_flag;
 * };
 * }
 */
public class skcms_CICP {

    public static MemoryLayout $LAYOUT() {
        return constants$0.const$134;
    }
    public static VarHandle color_primaries$VH() {
        return constants$0.const$135;
    }
    /**
     * Getter for field:
     * {@snippet :
     * uint8_t color_primaries;
     * }
     */
    public static byte color_primaries$get(MemorySegment seg) {
        return (byte)constants$0.const$135.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * uint8_t color_primaries;
     * }
     */
    public static void color_primaries$set(MemorySegment seg, byte x) {
        constants$0.const$135.set(seg, x);
    }
    public static byte color_primaries$get(MemorySegment seg, long index) {
        return (byte)constants$0.const$135.get(seg.asSlice(index*sizeof()));
    }
    public static void color_primaries$set(MemorySegment seg, long index, byte x) {
        constants$0.const$135.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle transfer_characteristics$VH() {
        return constants$0.const$136;
    }
    /**
     * Getter for field:
     * {@snippet :
     * uint8_t transfer_characteristics;
     * }
     */
    public static byte transfer_characteristics$get(MemorySegment seg) {
        return (byte)constants$0.const$136.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * uint8_t transfer_characteristics;
     * }
     */
    public static void transfer_characteristics$set(MemorySegment seg, byte x) {
        constants$0.const$136.set(seg, x);
    }
    public static byte transfer_characteristics$get(MemorySegment seg, long index) {
        return (byte)constants$0.const$136.get(seg.asSlice(index*sizeof()));
    }
    public static void transfer_characteristics$set(MemorySegment seg, long index, byte x) {
        constants$0.const$136.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle matrix_coefficients$VH() {
        return constants$0.const$137;
    }
    /**
     * Getter for field:
     * {@snippet :
     * uint8_t matrix_coefficients;
     * }
     */
    public static byte matrix_coefficients$get(MemorySegment seg) {
        return (byte)constants$0.const$137.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * uint8_t matrix_coefficients;
     * }
     */
    public static void matrix_coefficients$set(MemorySegment seg, byte x) {
        constants$0.const$137.set(seg, x);
    }
    public static byte matrix_coefficients$get(MemorySegment seg, long index) {
        return (byte)constants$0.const$137.get(seg.asSlice(index*sizeof()));
    }
    public static void matrix_coefficients$set(MemorySegment seg, long index, byte x) {
        constants$0.const$137.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle video_full_range_flag$VH() {
        return constants$0.const$138;
    }
    /**
     * Getter for field:
     * {@snippet :
     * uint8_t video_full_range_flag;
     * }
     */
    public static byte video_full_range_flag$get(MemorySegment seg) {
        return (byte)constants$0.const$138.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * uint8_t video_full_range_flag;
     * }
     */
    public static void video_full_range_flag$set(MemorySegment seg, byte x) {
        constants$0.const$138.set(seg, x);
    }
    public static byte video_full_range_flag$get(MemorySegment seg, long index) {
        return (byte)constants$0.const$138.get(seg.asSlice(index*sizeof()));
    }
    public static void video_full_range_flag$set(MemorySegment seg, long index, byte x) {
        constants$0.const$138.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, Arena arena) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, arena); }
}


