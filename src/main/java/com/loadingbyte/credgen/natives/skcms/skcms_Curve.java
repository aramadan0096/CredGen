// Generated by jextract

package com.loadingbyte.credgen.natives.skcms;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * union skcms_Curve {
 *     struct {
 *         uint32_t alias_of_table_entries;
 *         skcms_TransferFunction parametric;
 *     };
 *     struct {
 *         uint32_t table_entries;
 *         const uint8_t* table_8;
 *         const uint8_t* table_16;
 *     };
 * };
 * }
 */
public class skcms_Curve {

    public static MemoryLayout $LAYOUT() {
        return constants$0.const$117;
    }
    public static VarHandle alias_of_table_entries$VH() {
        return constants$0.const$118;
    }
    /**
     * Getter for field:
     * {@snippet :
     * uint32_t alias_of_table_entries;
     * }
     */
    public static int alias_of_table_entries$get(MemorySegment seg) {
        return (int)constants$0.const$118.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * uint32_t alias_of_table_entries;
     * }
     */
    public static void alias_of_table_entries$set(MemorySegment seg, int x) {
        constants$0.const$118.set(seg, x);
    }
    public static int alias_of_table_entries$get(MemorySegment seg, long index) {
        return (int)constants$0.const$118.get(seg.asSlice(index*sizeof()));
    }
    public static void alias_of_table_entries$set(MemorySegment seg, long index, int x) {
        constants$0.const$118.set(seg.asSlice(index*sizeof()), x);
    }
    public static MemorySegment parametric$slice(MemorySegment seg) {
        return seg.asSlice(4, 28);
    }
    public static VarHandle table_entries$VH() {
        return constants$0.const$119;
    }
    /**
     * Getter for field:
     * {@snippet :
     * uint32_t table_entries;
     * }
     */
    public static int table_entries$get(MemorySegment seg) {
        return (int)constants$0.const$119.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * uint32_t table_entries;
     * }
     */
    public static void table_entries$set(MemorySegment seg, int x) {
        constants$0.const$119.set(seg, x);
    }
    public static int table_entries$get(MemorySegment seg, long index) {
        return (int)constants$0.const$119.get(seg.asSlice(index*sizeof()));
    }
    public static void table_entries$set(MemorySegment seg, long index, int x) {
        constants$0.const$119.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle table_8$VH() {
        return constants$0.const$120;
    }
    /**
     * Getter for field:
     * {@snippet :
     * const uint8_t* table_8;
     * }
     */
    public static MemorySegment table_8$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$0.const$120.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * const uint8_t* table_8;
     * }
     */
    public static void table_8$set(MemorySegment seg, MemorySegment x) {
        constants$0.const$120.set(seg, x);
    }
    public static MemorySegment table_8$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$0.const$120.get(seg.asSlice(index*sizeof()));
    }
    public static void table_8$set(MemorySegment seg, long index, MemorySegment x) {
        constants$0.const$120.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle table_16$VH() {
        return constants$0.const$121;
    }
    /**
     * Getter for field:
     * {@snippet :
     * const uint8_t* table_16;
     * }
     */
    public static MemorySegment table_16$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$0.const$121.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * const uint8_t* table_16;
     * }
     */
    public static void table_16$set(MemorySegment seg, MemorySegment x) {
        constants$0.const$121.set(seg, x);
    }
    public static MemorySegment table_16$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$0.const$121.get(seg.asSlice(index*sizeof()));
    }
    public static void table_16$set(MemorySegment seg, long index, MemorySegment x) {
        constants$0.const$121.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, Arena arena) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, arena); }
}


