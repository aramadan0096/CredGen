// Generated by jextract

package com.loadingbyte.credgen.natives.skcms;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct skcms_B2A {
 *     uint32_t input_channels;
 *     skcms_Curve input_curves[3];
 *     uint32_t matrix_channels;
 *     skcms_Matrix3x4 matrix;
 *     skcms_Curve matrix_curves[3];
 *     uint32_t output_channels;
 *     uint8_t grid_points[4];
 *     const uint8_t* grid_8;
 *     const uint8_t* grid_16;
 *     skcms_Curve output_curves[4];
 * };
 * }
 */
public class skcms_B2A {

    public static MemoryLayout $LAYOUT() {
        return constants$0.const$128;
    }
    public static VarHandle input_channels$VH() {
        return constants$0.const$129;
    }
    /**
     * Getter for field:
     * {@snippet :
     * uint32_t input_channels;
     * }
     */
    public static int input_channels$get(MemorySegment seg) {
        return (int)constants$0.const$129.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * uint32_t input_channels;
     * }
     */
    public static void input_channels$set(MemorySegment seg, int x) {
        constants$0.const$129.set(seg, x);
    }
    public static int input_channels$get(MemorySegment seg, long index) {
        return (int)constants$0.const$129.get(seg.asSlice(index*sizeof()));
    }
    public static void input_channels$set(MemorySegment seg, long index, int x) {
        constants$0.const$129.set(seg.asSlice(index*sizeof()), x);
    }
    public static MemorySegment input_curves$slice(MemorySegment seg) {
        return seg.asSlice(8, 96);
    }
    public static VarHandle matrix_channels$VH() {
        return constants$0.const$130;
    }
    /**
     * Getter for field:
     * {@snippet :
     * uint32_t matrix_channels;
     * }
     */
    public static int matrix_channels$get(MemorySegment seg) {
        return (int)constants$0.const$130.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * uint32_t matrix_channels;
     * }
     */
    public static void matrix_channels$set(MemorySegment seg, int x) {
        constants$0.const$130.set(seg, x);
    }
    public static int matrix_channels$get(MemorySegment seg, long index) {
        return (int)constants$0.const$130.get(seg.asSlice(index*sizeof()));
    }
    public static void matrix_channels$set(MemorySegment seg, long index, int x) {
        constants$0.const$130.set(seg.asSlice(index*sizeof()), x);
    }
    public static MemorySegment matrix$slice(MemorySegment seg) {
        return seg.asSlice(108, 48);
    }
    public static MemorySegment matrix_curves$slice(MemorySegment seg) {
        return seg.asSlice(160, 96);
    }
    public static VarHandle output_channels$VH() {
        return constants$0.const$131;
    }
    /**
     * Getter for field:
     * {@snippet :
     * uint32_t output_channels;
     * }
     */
    public static int output_channels$get(MemorySegment seg) {
        return (int)constants$0.const$131.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * uint32_t output_channels;
     * }
     */
    public static void output_channels$set(MemorySegment seg, int x) {
        constants$0.const$131.set(seg, x);
    }
    public static int output_channels$get(MemorySegment seg, long index) {
        return (int)constants$0.const$131.get(seg.asSlice(index*sizeof()));
    }
    public static void output_channels$set(MemorySegment seg, long index, int x) {
        constants$0.const$131.set(seg.asSlice(index*sizeof()), x);
    }
    public static MemorySegment grid_points$slice(MemorySegment seg) {
        return seg.asSlice(260, 4);
    }
    public static VarHandle grid_8$VH() {
        return constants$0.const$132;
    }
    /**
     * Getter for field:
     * {@snippet :
     * const uint8_t* grid_8;
     * }
     */
    public static MemorySegment grid_8$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$0.const$132.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * const uint8_t* grid_8;
     * }
     */
    public static void grid_8$set(MemorySegment seg, MemorySegment x) {
        constants$0.const$132.set(seg, x);
    }
    public static MemorySegment grid_8$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$0.const$132.get(seg.asSlice(index*sizeof()));
    }
    public static void grid_8$set(MemorySegment seg, long index, MemorySegment x) {
        constants$0.const$132.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle grid_16$VH() {
        return constants$0.const$133;
    }
    /**
     * Getter for field:
     * {@snippet :
     * const uint8_t* grid_16;
     * }
     */
    public static MemorySegment grid_16$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$0.const$133.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * const uint8_t* grid_16;
     * }
     */
    public static void grid_16$set(MemorySegment seg, MemorySegment x) {
        constants$0.const$133.set(seg, x);
    }
    public static MemorySegment grid_16$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$0.const$133.get(seg.asSlice(index*sizeof()));
    }
    public static void grid_16$set(MemorySegment seg, long index, MemorySegment x) {
        constants$0.const$133.set(seg.asSlice(index*sizeof()), x);
    }
    public static MemorySegment output_curves$slice(MemorySegment seg) {
        return seg.asSlice(280, 128);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, Arena arena) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, arena); }
}


