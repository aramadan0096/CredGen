// Generated by jextract

package com.loadingbyte.credgen.natives.skcms;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct skcms_ICCProfile {
 *     const uint8_t* buffer;
 *     uint32_t size;
 *     uint32_t data_color_space;
 *     uint32_t pcs;
 *     uint32_t tag_count;
 *     _Bool has_trc;
 *     skcms_Curve trc[3];
 *     _Bool has_toXYZD50;
 *     skcms_Matrix3x3 toXYZD50;
 *     _Bool has_A2B;
 *     skcms_A2B A2B;
 *     _Bool has_B2A;
 *     skcms_B2A B2A;
 *     _Bool has_CICP;
 *     skcms_CICP CICP;
 * };
 * }
 */
public class skcms_ICCProfile {

    public static MemoryLayout $LAYOUT() {
        return constants$0.const$139;
    }
    public static VarHandle buffer$VH() {
        return constants$0.const$140;
    }
    /**
     * Getter for field:
     * {@snippet :
     * const uint8_t* buffer;
     * }
     */
    public static MemorySegment buffer$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$0.const$140.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * const uint8_t* buffer;
     * }
     */
    public static void buffer$set(MemorySegment seg, MemorySegment x) {
        constants$0.const$140.set(seg, x);
    }
    public static MemorySegment buffer$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$0.const$140.get(seg.asSlice(index*sizeof()));
    }
    public static void buffer$set(MemorySegment seg, long index, MemorySegment x) {
        constants$0.const$140.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle size$VH() {
        return constants$0.const$141;
    }
    /**
     * Getter for field:
     * {@snippet :
     * uint32_t size;
     * }
     */
    public static int size$get(MemorySegment seg) {
        return (int)constants$0.const$141.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * uint32_t size;
     * }
     */
    public static void size$set(MemorySegment seg, int x) {
        constants$0.const$141.set(seg, x);
    }
    public static int size$get(MemorySegment seg, long index) {
        return (int)constants$0.const$141.get(seg.asSlice(index*sizeof()));
    }
    public static void size$set(MemorySegment seg, long index, int x) {
        constants$0.const$141.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle data_color_space$VH() {
        return constants$0.const$142;
    }
    /**
     * Getter for field:
     * {@snippet :
     * uint32_t data_color_space;
     * }
     */
    public static int data_color_space$get(MemorySegment seg) {
        return (int)constants$0.const$142.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * uint32_t data_color_space;
     * }
     */
    public static void data_color_space$set(MemorySegment seg, int x) {
        constants$0.const$142.set(seg, x);
    }
    public static int data_color_space$get(MemorySegment seg, long index) {
        return (int)constants$0.const$142.get(seg.asSlice(index*sizeof()));
    }
    public static void data_color_space$set(MemorySegment seg, long index, int x) {
        constants$0.const$142.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle pcs$VH() {
        return constants$0.const$143;
    }
    /**
     * Getter for field:
     * {@snippet :
     * uint32_t pcs;
     * }
     */
    public static int pcs$get(MemorySegment seg) {
        return (int)constants$0.const$143.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * uint32_t pcs;
     * }
     */
    public static void pcs$set(MemorySegment seg, int x) {
        constants$0.const$143.set(seg, x);
    }
    public static int pcs$get(MemorySegment seg, long index) {
        return (int)constants$0.const$143.get(seg.asSlice(index*sizeof()));
    }
    public static void pcs$set(MemorySegment seg, long index, int x) {
        constants$0.const$143.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle tag_count$VH() {
        return constants$0.const$144;
    }
    /**
     * Getter for field:
     * {@snippet :
     * uint32_t tag_count;
     * }
     */
    public static int tag_count$get(MemorySegment seg) {
        return (int)constants$0.const$144.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * uint32_t tag_count;
     * }
     */
    public static void tag_count$set(MemorySegment seg, int x) {
        constants$0.const$144.set(seg, x);
    }
    public static int tag_count$get(MemorySegment seg, long index) {
        return (int)constants$0.const$144.get(seg.asSlice(index*sizeof()));
    }
    public static void tag_count$set(MemorySegment seg, long index, int x) {
        constants$0.const$144.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle has_trc$VH() {
        return constants$0.const$145;
    }
    /**
     * Getter for field:
     * {@snippet :
     * _Bool has_trc;
     * }
     */
    public static boolean has_trc$get(MemorySegment seg) {
        return (boolean)constants$0.const$145.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * _Bool has_trc;
     * }
     */
    public static void has_trc$set(MemorySegment seg, boolean x) {
        constants$0.const$145.set(seg, x);
    }
    public static boolean has_trc$get(MemorySegment seg, long index) {
        return (boolean)constants$0.const$145.get(seg.asSlice(index*sizeof()));
    }
    public static void has_trc$set(MemorySegment seg, long index, boolean x) {
        constants$0.const$145.set(seg.asSlice(index*sizeof()), x);
    }
    public static MemorySegment trc$slice(MemorySegment seg) {
        return seg.asSlice(32, 96);
    }
    public static VarHandle has_toXYZD50$VH() {
        return constants$0.const$146;
    }
    /**
     * Getter for field:
     * {@snippet :
     * _Bool has_toXYZD50;
     * }
     */
    public static boolean has_toXYZD50$get(MemorySegment seg) {
        return (boolean)constants$0.const$146.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * _Bool has_toXYZD50;
     * }
     */
    public static void has_toXYZD50$set(MemorySegment seg, boolean x) {
        constants$0.const$146.set(seg, x);
    }
    public static boolean has_toXYZD50$get(MemorySegment seg, long index) {
        return (boolean)constants$0.const$146.get(seg.asSlice(index*sizeof()));
    }
    public static void has_toXYZD50$set(MemorySegment seg, long index, boolean x) {
        constants$0.const$146.set(seg.asSlice(index*sizeof()), x);
    }
    public static MemorySegment toXYZD50$slice(MemorySegment seg) {
        return seg.asSlice(132, 36);
    }
    public static VarHandle has_A2B$VH() {
        return constants$0.const$147;
    }
    /**
     * Getter for field:
     * {@snippet :
     * _Bool has_A2B;
     * }
     */
    public static boolean has_A2B$get(MemorySegment seg) {
        return (boolean)constants$0.const$147.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * _Bool has_A2B;
     * }
     */
    public static void has_A2B$set(MemorySegment seg, boolean x) {
        constants$0.const$147.set(seg, x);
    }
    public static boolean has_A2B$get(MemorySegment seg, long index) {
        return (boolean)constants$0.const$147.get(seg.asSlice(index*sizeof()));
    }
    public static void has_A2B$set(MemorySegment seg, long index, boolean x) {
        constants$0.const$147.set(seg.asSlice(index*sizeof()), x);
    }
    public static MemorySegment A2B$slice(MemorySegment seg) {
        return seg.asSlice(176, 416);
    }
    public static VarHandle has_B2A$VH() {
        return constants$0.const$148;
    }
    /**
     * Getter for field:
     * {@snippet :
     * _Bool has_B2A;
     * }
     */
    public static boolean has_B2A$get(MemorySegment seg) {
        return (boolean)constants$0.const$148.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * _Bool has_B2A;
     * }
     */
    public static void has_B2A$set(MemorySegment seg, boolean x) {
        constants$0.const$148.set(seg, x);
    }
    public static boolean has_B2A$get(MemorySegment seg, long index) {
        return (boolean)constants$0.const$148.get(seg.asSlice(index*sizeof()));
    }
    public static void has_B2A$set(MemorySegment seg, long index, boolean x) {
        constants$0.const$148.set(seg.asSlice(index*sizeof()), x);
    }
    public static MemorySegment B2A$slice(MemorySegment seg) {
        return seg.asSlice(600, 408);
    }
    public static VarHandle has_CICP$VH() {
        return constants$0.const$149;
    }
    /**
     * Getter for field:
     * {@snippet :
     * _Bool has_CICP;
     * }
     */
    public static boolean has_CICP$get(MemorySegment seg) {
        return (boolean)constants$0.const$149.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * _Bool has_CICP;
     * }
     */
    public static void has_CICP$set(MemorySegment seg, boolean x) {
        constants$0.const$149.set(seg, x);
    }
    public static boolean has_CICP$get(MemorySegment seg, long index) {
        return (boolean)constants$0.const$149.get(seg.asSlice(index*sizeof()));
    }
    public static void has_CICP$set(MemorySegment seg, long index, boolean x) {
        constants$0.const$149.set(seg.asSlice(index*sizeof()), x);
    }
    public static MemorySegment CICP$slice(MemorySegment seg) {
        return seg.asSlice(1009, 4);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, Arena arena) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, arena); }
}


