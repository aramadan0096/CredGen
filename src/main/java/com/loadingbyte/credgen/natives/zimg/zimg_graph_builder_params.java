// Generated by jextract

package com.loadingbyte.credgen.natives.zimg;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct zimg_graph_builder_params {
 *     unsigned int version;
 *     zimg_resample_filter_e resample_filter;
 *     double filter_param_a;
 *     double filter_param_b;
 *     zimg_resample_filter_e resample_filter_uv;
 *     double filter_param_a_uv;
 *     double filter_param_b_uv;
 *     zimg_dither_type_e dither_type;
 *     zimg_cpu_type_e cpu_type;
 *     double nominal_peak_luminance;
 *     char allow_approximate_gamma;
 * };
 * }
 */
public class zimg_graph_builder_params {

    public static MemoryLayout $LAYOUT() {
        return constants$0.const$47;
    }
    public static VarHandle version$VH() {
        return constants$0.const$48;
    }
    /**
     * Getter for field:
     * {@snippet :
     * unsigned int version;
     * }
     */
    public static int version$get(MemorySegment seg) {
        return (int)constants$0.const$48.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * unsigned int version;
     * }
     */
    public static void version$set(MemorySegment seg, int x) {
        constants$0.const$48.set(seg, x);
    }
    public static int version$get(MemorySegment seg, long index) {
        return (int)constants$0.const$48.get(seg.asSlice(index*sizeof()));
    }
    public static void version$set(MemorySegment seg, long index, int x) {
        constants$0.const$48.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle resample_filter$VH() {
        return constants$0.const$49;
    }
    /**
     * Getter for field:
     * {@snippet :
     * zimg_resample_filter_e resample_filter;
     * }
     */
    public static int resample_filter$get(MemorySegment seg) {
        return (int)constants$0.const$49.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * zimg_resample_filter_e resample_filter;
     * }
     */
    public static void resample_filter$set(MemorySegment seg, int x) {
        constants$0.const$49.set(seg, x);
    }
    public static int resample_filter$get(MemorySegment seg, long index) {
        return (int)constants$0.const$49.get(seg.asSlice(index*sizeof()));
    }
    public static void resample_filter$set(MemorySegment seg, long index, int x) {
        constants$0.const$49.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle filter_param_a$VH() {
        return constants$0.const$50;
    }
    /**
     * Getter for field:
     * {@snippet :
     * double filter_param_a;
     * }
     */
    public static double filter_param_a$get(MemorySegment seg) {
        return (double)constants$0.const$50.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * double filter_param_a;
     * }
     */
    public static void filter_param_a$set(MemorySegment seg, double x) {
        constants$0.const$50.set(seg, x);
    }
    public static double filter_param_a$get(MemorySegment seg, long index) {
        return (double)constants$0.const$50.get(seg.asSlice(index*sizeof()));
    }
    public static void filter_param_a$set(MemorySegment seg, long index, double x) {
        constants$0.const$50.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle filter_param_b$VH() {
        return constants$0.const$51;
    }
    /**
     * Getter for field:
     * {@snippet :
     * double filter_param_b;
     * }
     */
    public static double filter_param_b$get(MemorySegment seg) {
        return (double)constants$0.const$51.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * double filter_param_b;
     * }
     */
    public static void filter_param_b$set(MemorySegment seg, double x) {
        constants$0.const$51.set(seg, x);
    }
    public static double filter_param_b$get(MemorySegment seg, long index) {
        return (double)constants$0.const$51.get(seg.asSlice(index*sizeof()));
    }
    public static void filter_param_b$set(MemorySegment seg, long index, double x) {
        constants$0.const$51.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle resample_filter_uv$VH() {
        return constants$0.const$52;
    }
    /**
     * Getter for field:
     * {@snippet :
     * zimg_resample_filter_e resample_filter_uv;
     * }
     */
    public static int resample_filter_uv$get(MemorySegment seg) {
        return (int)constants$0.const$52.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * zimg_resample_filter_e resample_filter_uv;
     * }
     */
    public static void resample_filter_uv$set(MemorySegment seg, int x) {
        constants$0.const$52.set(seg, x);
    }
    public static int resample_filter_uv$get(MemorySegment seg, long index) {
        return (int)constants$0.const$52.get(seg.asSlice(index*sizeof()));
    }
    public static void resample_filter_uv$set(MemorySegment seg, long index, int x) {
        constants$0.const$52.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle filter_param_a_uv$VH() {
        return constants$0.const$53;
    }
    /**
     * Getter for field:
     * {@snippet :
     * double filter_param_a_uv;
     * }
     */
    public static double filter_param_a_uv$get(MemorySegment seg) {
        return (double)constants$0.const$53.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * double filter_param_a_uv;
     * }
     */
    public static void filter_param_a_uv$set(MemorySegment seg, double x) {
        constants$0.const$53.set(seg, x);
    }
    public static double filter_param_a_uv$get(MemorySegment seg, long index) {
        return (double)constants$0.const$53.get(seg.asSlice(index*sizeof()));
    }
    public static void filter_param_a_uv$set(MemorySegment seg, long index, double x) {
        constants$0.const$53.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle filter_param_b_uv$VH() {
        return constants$0.const$54;
    }
    /**
     * Getter for field:
     * {@snippet :
     * double filter_param_b_uv;
     * }
     */
    public static double filter_param_b_uv$get(MemorySegment seg) {
        return (double)constants$0.const$54.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * double filter_param_b_uv;
     * }
     */
    public static void filter_param_b_uv$set(MemorySegment seg, double x) {
        constants$0.const$54.set(seg, x);
    }
    public static double filter_param_b_uv$get(MemorySegment seg, long index) {
        return (double)constants$0.const$54.get(seg.asSlice(index*sizeof()));
    }
    public static void filter_param_b_uv$set(MemorySegment seg, long index, double x) {
        constants$0.const$54.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle dither_type$VH() {
        return constants$0.const$55;
    }
    /**
     * Getter for field:
     * {@snippet :
     * zimg_dither_type_e dither_type;
     * }
     */
    public static int dither_type$get(MemorySegment seg) {
        return (int)constants$0.const$55.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * zimg_dither_type_e dither_type;
     * }
     */
    public static void dither_type$set(MemorySegment seg, int x) {
        constants$0.const$55.set(seg, x);
    }
    public static int dither_type$get(MemorySegment seg, long index) {
        return (int)constants$0.const$55.get(seg.asSlice(index*sizeof()));
    }
    public static void dither_type$set(MemorySegment seg, long index, int x) {
        constants$0.const$55.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle cpu_type$VH() {
        return constants$0.const$56;
    }
    /**
     * Getter for field:
     * {@snippet :
     * zimg_cpu_type_e cpu_type;
     * }
     */
    public static int cpu_type$get(MemorySegment seg) {
        return (int)constants$0.const$56.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * zimg_cpu_type_e cpu_type;
     * }
     */
    public static void cpu_type$set(MemorySegment seg, int x) {
        constants$0.const$56.set(seg, x);
    }
    public static int cpu_type$get(MemorySegment seg, long index) {
        return (int)constants$0.const$56.get(seg.asSlice(index*sizeof()));
    }
    public static void cpu_type$set(MemorySegment seg, long index, int x) {
        constants$0.const$56.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle nominal_peak_luminance$VH() {
        return constants$0.const$57;
    }
    /**
     * Getter for field:
     * {@snippet :
     * double nominal_peak_luminance;
     * }
     */
    public static double nominal_peak_luminance$get(MemorySegment seg) {
        return (double)constants$0.const$57.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * double nominal_peak_luminance;
     * }
     */
    public static void nominal_peak_luminance$set(MemorySegment seg, double x) {
        constants$0.const$57.set(seg, x);
    }
    public static double nominal_peak_luminance$get(MemorySegment seg, long index) {
        return (double)constants$0.const$57.get(seg.asSlice(index*sizeof()));
    }
    public static void nominal_peak_luminance$set(MemorySegment seg, long index, double x) {
        constants$0.const$57.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle allow_approximate_gamma$VH() {
        return constants$0.const$58;
    }
    /**
     * Getter for field:
     * {@snippet :
     * char allow_approximate_gamma;
     * }
     */
    public static byte allow_approximate_gamma$get(MemorySegment seg) {
        return (byte)constants$0.const$58.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * char allow_approximate_gamma;
     * }
     */
    public static void allow_approximate_gamma$set(MemorySegment seg, byte x) {
        constants$0.const$58.set(seg, x);
    }
    public static byte allow_approximate_gamma$get(MemorySegment seg, long index) {
        return (byte)constants$0.const$58.get(seg.asSlice(index*sizeof()));
    }
    public static void allow_approximate_gamma$set(MemorySegment seg, long index, byte x) {
        constants$0.const$58.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, Arena arena) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, arena); }
}


