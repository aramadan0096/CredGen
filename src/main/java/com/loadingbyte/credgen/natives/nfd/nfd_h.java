// Generated by jextract

package com.loadingbyte.credgen.natives.nfd;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
public class nfd_h  {

    public static final OfByte C_CHAR = JAVA_BYTE;
    public static final OfShort C_SHORT = JAVA_SHORT;
    public static final OfInt C_INT = JAVA_INT;
    public static final OfLong C_LONG = JAVA_LONG;
    public static final OfLong C_LONG_LONG = JAVA_LONG;
    public static final OfFloat C_FLOAT = JAVA_FLOAT;
    public static final OfDouble C_DOUBLE = JAVA_DOUBLE;
    public static final AddressLayout C_POINTER = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef long ptrdiff_t;
     * }
     */
    public static final OfLong ptrdiff_t = JAVA_LONG;
    /**
     * {@snippet :
     * typedef unsigned long size_t;
     * }
     */
    public static final OfLong size_t = JAVA_LONG;
    /**
     * {@snippet :
     * typedef int wchar_t;
     * }
     */
    public static final OfInt wchar_t = JAVA_INT;
    /**
     * {@snippet :
     * typedef char nfdu8char_t;
     * }
     */
    public static final OfByte nfdu8char_t = JAVA_BYTE;
    /**
     * {@snippet :
     * typedef char nfdnchar_t;
     * }
     */
    public static final OfByte nfdnchar_t = JAVA_BYTE;
    /**
     * {@snippet :
     * typedef unsigned int nfdfiltersize_t;
     * }
     */
    public static final OfInt nfdfiltersize_t = JAVA_INT;
    /**
     * {@snippet :
     * enum .NFD_ERROR = 0;
     * }
     */
    public static int NFD_ERROR() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * enum .NFD_OKAY = 1;
     * }
     */
    public static int NFD_OKAY() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum .NFD_CANCEL = 2;
     * }
     */
    public static int NFD_CANCEL() {
        return (int)2L;
    }
    public static MethodHandle NFD_FreePathN$MH() {
        return RuntimeHelper.requireNonNull(constants$0.const$8,"NFD_FreePathN");
    }
    /**
     * {@snippet :
     * void NFD_FreePathN(nfdnchar_t* filePath);
     * }
     */
    public static void NFD_FreePathN(MemorySegment filePath) {
        var mh$ = NFD_FreePathN$MH();
        try {
            mh$.invokeExact(filePath);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NFD_FreePathU8$MH() {
        return RuntimeHelper.requireNonNull(constants$0.const$9,"NFD_FreePathU8");
    }
    /**
     * {@snippet :
     * void NFD_FreePathU8(nfdu8char_t* filePath);
     * }
     */
    public static void NFD_FreePathU8(MemorySegment filePath) {
        var mh$ = NFD_FreePathU8$MH();
        try {
            mh$.invokeExact(filePath);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NFD_Init$MH() {
        return RuntimeHelper.requireNonNull(constants$0.const$11,"NFD_Init");
    }
    /**
     * {@snippet :
     * nfdresult_t NFD_Init();
     * }
     */
    public static int NFD_Init() {
        var mh$ = NFD_Init$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NFD_Quit$MH() {
        return RuntimeHelper.requireNonNull(constants$0.const$13,"NFD_Quit");
    }
    /**
     * {@snippet :
     * void NFD_Quit();
     * }
     */
    public static void NFD_Quit() {
        var mh$ = NFD_Quit$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NFD_OpenDialogN$MH() {
        return RuntimeHelper.requireNonNull(constants$0.const$15,"NFD_OpenDialogN");
    }
    /**
     * {@snippet :
     * nfdresult_t NFD_OpenDialogN(nfdnchar_t** outPath, const nfdnfilteritem_t* filterList, nfdfiltersize_t filterCount, const nfdnchar_t* defaultPath);
     * }
     */
    public static int NFD_OpenDialogN(MemorySegment outPath, MemorySegment filterList, int filterCount, MemorySegment defaultPath) {
        var mh$ = NFD_OpenDialogN$MH();
        try {
            return (int)mh$.invokeExact(outPath, filterList, filterCount, defaultPath);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NFD_OpenDialogU8$MH() {
        return RuntimeHelper.requireNonNull(constants$0.const$16,"NFD_OpenDialogU8");
    }
    /**
     * {@snippet :
     * nfdresult_t NFD_OpenDialogU8(nfdu8char_t** outPath, const nfdu8filteritem_t* filterList, nfdfiltersize_t filterCount, const nfdu8char_t* defaultPath);
     * }
     */
    public static int NFD_OpenDialogU8(MemorySegment outPath, MemorySegment filterList, int filterCount, MemorySegment defaultPath) {
        var mh$ = NFD_OpenDialogU8$MH();
        try {
            return (int)mh$.invokeExact(outPath, filterList, filterCount, defaultPath);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NFD_OpenDialogMultipleN$MH() {
        return RuntimeHelper.requireNonNull(constants$0.const$17,"NFD_OpenDialogMultipleN");
    }
    /**
     * {@snippet :
     * nfdresult_t NFD_OpenDialogMultipleN(const nfdpathset_t** outPaths, const nfdnfilteritem_t* filterList, nfdfiltersize_t filterCount, const nfdnchar_t* defaultPath);
     * }
     */
    public static int NFD_OpenDialogMultipleN(MemorySegment outPaths, MemorySegment filterList, int filterCount, MemorySegment defaultPath) {
        var mh$ = NFD_OpenDialogMultipleN$MH();
        try {
            return (int)mh$.invokeExact(outPaths, filterList, filterCount, defaultPath);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NFD_OpenDialogMultipleU8$MH() {
        return RuntimeHelper.requireNonNull(constants$0.const$18,"NFD_OpenDialogMultipleU8");
    }
    /**
     * {@snippet :
     * nfdresult_t NFD_OpenDialogMultipleU8(const nfdpathset_t** outPaths, const nfdu8filteritem_t* filterList, nfdfiltersize_t filterCount, const nfdu8char_t* defaultPath);
     * }
     */
    public static int NFD_OpenDialogMultipleU8(MemorySegment outPaths, MemorySegment filterList, int filterCount, MemorySegment defaultPath) {
        var mh$ = NFD_OpenDialogMultipleU8$MH();
        try {
            return (int)mh$.invokeExact(outPaths, filterList, filterCount, defaultPath);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NFD_SaveDialogN$MH() {
        return RuntimeHelper.requireNonNull(constants$0.const$20,"NFD_SaveDialogN");
    }
    /**
     * {@snippet :
     * nfdresult_t NFD_SaveDialogN(nfdnchar_t** outPath, const nfdnfilteritem_t* filterList, nfdfiltersize_t filterCount, const nfdnchar_t* defaultPath, const nfdnchar_t* defaultName);
     * }
     */
    public static int NFD_SaveDialogN(MemorySegment outPath, MemorySegment filterList, int filterCount, MemorySegment defaultPath, MemorySegment defaultName) {
        var mh$ = NFD_SaveDialogN$MH();
        try {
            return (int)mh$.invokeExact(outPath, filterList, filterCount, defaultPath, defaultName);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NFD_SaveDialogU8$MH() {
        return RuntimeHelper.requireNonNull(constants$0.const$21,"NFD_SaveDialogU8");
    }
    /**
     * {@snippet :
     * nfdresult_t NFD_SaveDialogU8(nfdu8char_t** outPath, const nfdu8filteritem_t* filterList, nfdfiltersize_t filterCount, const nfdu8char_t* defaultPath, const nfdu8char_t* defaultName);
     * }
     */
    public static int NFD_SaveDialogU8(MemorySegment outPath, MemorySegment filterList, int filterCount, MemorySegment defaultPath, MemorySegment defaultName) {
        var mh$ = NFD_SaveDialogU8$MH();
        try {
            return (int)mh$.invokeExact(outPath, filterList, filterCount, defaultPath, defaultName);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NFD_PickFolderN$MH() {
        return RuntimeHelper.requireNonNull(constants$0.const$23,"NFD_PickFolderN");
    }
    /**
     * {@snippet :
     * nfdresult_t NFD_PickFolderN(nfdnchar_t** outPath, const nfdnchar_t* defaultPath);
     * }
     */
    public static int NFD_PickFolderN(MemorySegment outPath, MemorySegment defaultPath) {
        var mh$ = NFD_PickFolderN$MH();
        try {
            return (int)mh$.invokeExact(outPath, defaultPath);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NFD_PickFolderU8$MH() {
        return RuntimeHelper.requireNonNull(constants$0.const$24,"NFD_PickFolderU8");
    }
    /**
     * {@snippet :
     * nfdresult_t NFD_PickFolderU8(nfdu8char_t** outPath, const nfdu8char_t* defaultPath);
     * }
     */
    public static int NFD_PickFolderU8(MemorySegment outPath, MemorySegment defaultPath) {
        var mh$ = NFD_PickFolderU8$MH();
        try {
            return (int)mh$.invokeExact(outPath, defaultPath);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NFD_GetError$MH() {
        return RuntimeHelper.requireNonNull(constants$0.const$26,"NFD_GetError");
    }
    /**
     * {@snippet :
     * char* NFD_GetError();
     * }
     */
    public static MemorySegment NFD_GetError() {
        var mh$ = NFD_GetError$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NFD_ClearError$MH() {
        return RuntimeHelper.requireNonNull(constants$0.const$27,"NFD_ClearError");
    }
    /**
     * {@snippet :
     * void NFD_ClearError();
     * }
     */
    public static void NFD_ClearError() {
        var mh$ = NFD_ClearError$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet :
     * typedef unsigned int nfdpathsetsize_t;
     * }
     */
    public static final OfInt nfdpathsetsize_t = JAVA_INT;
    public static MethodHandle NFD_PathSet_GetCount$MH() {
        return RuntimeHelper.requireNonNull(constants$0.const$28,"NFD_PathSet_GetCount");
    }
    /**
     * {@snippet :
     * nfdresult_t NFD_PathSet_GetCount(const nfdpathset_t* pathSet, nfdpathsetsize_t* count);
     * }
     */
    public static int NFD_PathSet_GetCount(MemorySegment pathSet, MemorySegment count) {
        var mh$ = NFD_PathSet_GetCount$MH();
        try {
            return (int)mh$.invokeExact(pathSet, count);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NFD_PathSet_GetPathN$MH() {
        return RuntimeHelper.requireNonNull(constants$0.const$30,"NFD_PathSet_GetPathN");
    }
    /**
     * {@snippet :
     * nfdresult_t NFD_PathSet_GetPathN(const nfdpathset_t* pathSet, nfdpathsetsize_t index, nfdnchar_t** outPath);
     * }
     */
    public static int NFD_PathSet_GetPathN(MemorySegment pathSet, int index, MemorySegment outPath) {
        var mh$ = NFD_PathSet_GetPathN$MH();
        try {
            return (int)mh$.invokeExact(pathSet, index, outPath);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NFD_PathSet_GetPathU8$MH() {
        return RuntimeHelper.requireNonNull(constants$0.const$31,"NFD_PathSet_GetPathU8");
    }
    /**
     * {@snippet :
     * nfdresult_t NFD_PathSet_GetPathU8(const nfdpathset_t* pathSet, nfdpathsetsize_t index, nfdu8char_t** outPath);
     * }
     */
    public static int NFD_PathSet_GetPathU8(MemorySegment pathSet, int index, MemorySegment outPath) {
        var mh$ = NFD_PathSet_GetPathU8$MH();
        try {
            return (int)mh$.invokeExact(pathSet, index, outPath);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NFD_PathSet_FreePathN$MH() {
        return RuntimeHelper.requireNonNull(constants$0.const$32,"NFD_PathSet_FreePathN");
    }
    /**
     * {@snippet :
     * void NFD_PathSet_FreePathN(const nfdnchar_t* filePath);
     * }
     */
    public static void NFD_PathSet_FreePathN(MemorySegment filePath) {
        var mh$ = NFD_PathSet_FreePathN$MH();
        try {
            mh$.invokeExact(filePath);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NFD_PathSet_FreePathU8$MH() {
        return RuntimeHelper.requireNonNull(constants$0.const$33,"NFD_PathSet_FreePathU8");
    }
    /**
     * {@snippet :
     * void NFD_PathSet_FreePathU8(const nfdu8char_t* filePath);
     * }
     */
    public static void NFD_PathSet_FreePathU8(MemorySegment filePath) {
        var mh$ = NFD_PathSet_FreePathU8$MH();
        try {
            mh$.invokeExact(filePath);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NFD_PathSet_GetEnum$MH() {
        return RuntimeHelper.requireNonNull(constants$0.const$34,"NFD_PathSet_GetEnum");
    }
    /**
     * {@snippet :
     * nfdresult_t NFD_PathSet_GetEnum(const nfdpathset_t* pathSet, nfdpathsetenum_t* outEnumerator);
     * }
     */
    public static int NFD_PathSet_GetEnum(MemorySegment pathSet, MemorySegment outEnumerator) {
        var mh$ = NFD_PathSet_GetEnum$MH();
        try {
            return (int)mh$.invokeExact(pathSet, outEnumerator);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NFD_PathSet_FreeEnum$MH() {
        return RuntimeHelper.requireNonNull(constants$0.const$35,"NFD_PathSet_FreeEnum");
    }
    /**
     * {@snippet :
     * void NFD_PathSet_FreeEnum(nfdpathsetenum_t* enumerator);
     * }
     */
    public static void NFD_PathSet_FreeEnum(MemorySegment enumerator) {
        var mh$ = NFD_PathSet_FreeEnum$MH();
        try {
            mh$.invokeExact(enumerator);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NFD_PathSet_EnumNextN$MH() {
        return RuntimeHelper.requireNonNull(constants$0.const$36,"NFD_PathSet_EnumNextN");
    }
    /**
     * {@snippet :
     * nfdresult_t NFD_PathSet_EnumNextN(nfdpathsetenum_t* enumerator, nfdnchar_t** outPath);
     * }
     */
    public static int NFD_PathSet_EnumNextN(MemorySegment enumerator, MemorySegment outPath) {
        var mh$ = NFD_PathSet_EnumNextN$MH();
        try {
            return (int)mh$.invokeExact(enumerator, outPath);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NFD_PathSet_EnumNextU8$MH() {
        return RuntimeHelper.requireNonNull(constants$0.const$37,"NFD_PathSet_EnumNextU8");
    }
    /**
     * {@snippet :
     * nfdresult_t NFD_PathSet_EnumNextU8(nfdpathsetenum_t* enumerator, nfdu8char_t** outPath);
     * }
     */
    public static int NFD_PathSet_EnumNextU8(MemorySegment enumerator, MemorySegment outPath) {
        var mh$ = NFD_PathSet_EnumNextU8$MH();
        try {
            return (int)mh$.invokeExact(enumerator, outPath);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NFD_PathSet_Free$MH() {
        return RuntimeHelper.requireNonNull(constants$0.const$38,"NFD_PathSet_Free");
    }
    /**
     * {@snippet :
     * void NFD_PathSet_Free(const nfdpathset_t* pathSet);
     * }
     */
    public static void NFD_PathSet_Free(MemorySegment pathSet) {
        var mh$ = NFD_PathSet_Free$MH();
        try {
            mh$.invokeExact(pathSet);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet :
     * typedef char nfdchar_t;
     * }
     */
    public static final OfByte nfdchar_t = JAVA_BYTE;
    /**
     * {@snippet :
     * #define NULL 0
     * }
     */
    public static MemorySegment NULL() {
        return constants$0.const$39;
    }
}


