// Generated by jextract

package com.loadingbyte.credgen.natives.harfbuzz;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct hb_glyph_position_t {
 *     hb_position_t x_advance;
 *     hb_position_t y_advance;
 *     hb_position_t x_offset;
 *     hb_position_t y_offset;
 *     hb_var_int_t var;
 * };
 * }
 */
public class hb_glyph_position_t {

    public static MemoryLayout $LAYOUT() {
        return constants$0.const$29;
    }
    public static VarHandle x_advance$VH() {
        return constants$0.const$30;
    }
    /**
     * Getter for field:
     * {@snippet :
     * hb_position_t x_advance;
     * }
     */
    public static int x_advance$get(MemorySegment seg) {
        return (int)constants$0.const$30.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * hb_position_t x_advance;
     * }
     */
    public static void x_advance$set(MemorySegment seg, int x) {
        constants$0.const$30.set(seg, x);
    }
    public static int x_advance$get(MemorySegment seg, long index) {
        return (int)constants$0.const$30.get(seg.asSlice(index*sizeof()));
    }
    public static void x_advance$set(MemorySegment seg, long index, int x) {
        constants$0.const$30.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle y_advance$VH() {
        return constants$0.const$31;
    }
    /**
     * Getter for field:
     * {@snippet :
     * hb_position_t y_advance;
     * }
     */
    public static int y_advance$get(MemorySegment seg) {
        return (int)constants$0.const$31.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * hb_position_t y_advance;
     * }
     */
    public static void y_advance$set(MemorySegment seg, int x) {
        constants$0.const$31.set(seg, x);
    }
    public static int y_advance$get(MemorySegment seg, long index) {
        return (int)constants$0.const$31.get(seg.asSlice(index*sizeof()));
    }
    public static void y_advance$set(MemorySegment seg, long index, int x) {
        constants$0.const$31.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle x_offset$VH() {
        return constants$0.const$32;
    }
    /**
     * Getter for field:
     * {@snippet :
     * hb_position_t x_offset;
     * }
     */
    public static int x_offset$get(MemorySegment seg) {
        return (int)constants$0.const$32.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * hb_position_t x_offset;
     * }
     */
    public static void x_offset$set(MemorySegment seg, int x) {
        constants$0.const$32.set(seg, x);
    }
    public static int x_offset$get(MemorySegment seg, long index) {
        return (int)constants$0.const$32.get(seg.asSlice(index*sizeof()));
    }
    public static void x_offset$set(MemorySegment seg, long index, int x) {
        constants$0.const$32.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle y_offset$VH() {
        return constants$0.const$33;
    }
    /**
     * Getter for field:
     * {@snippet :
     * hb_position_t y_offset;
     * }
     */
    public static int y_offset$get(MemorySegment seg) {
        return (int)constants$0.const$33.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * hb_position_t y_offset;
     * }
     */
    public static void y_offset$set(MemorySegment seg, int x) {
        constants$0.const$33.set(seg, x);
    }
    public static int y_offset$get(MemorySegment seg, long index) {
        return (int)constants$0.const$33.get(seg.asSlice(index*sizeof()));
    }
    public static void y_offset$set(MemorySegment seg, long index, int x) {
        constants$0.const$33.set(seg.asSlice(index*sizeof()), x);
    }
    public static MemorySegment var_$slice(MemorySegment seg) {
        return seg.asSlice(16, 4);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, Arena arena) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, arena); }
}


