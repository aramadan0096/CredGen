// Generated by jextract

package com.loadingbyte.credgen.natives.skiacapi;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * _Bool (*loadImage_t)(char* path,char* name,char* id,int* w,int* h,unsigned char* colorType,unsigned char* alphaType,void** colorSpace,void** pixels,long long* rowBytes);
 * }
 */
public interface loadImage_t {

    boolean apply(java.lang.foreign.MemorySegment path, java.lang.foreign.MemorySegment name, java.lang.foreign.MemorySegment id, java.lang.foreign.MemorySegment w, java.lang.foreign.MemorySegment h, java.lang.foreign.MemorySegment colorType, java.lang.foreign.MemorySegment alphaType, java.lang.foreign.MemorySegment colorSpace, java.lang.foreign.MemorySegment pixels, java.lang.foreign.MemorySegment rowBytes);
    static MemorySegment allocate(loadImage_t fi, Arena scope) {
        return RuntimeHelper.upcallStub(constants$0.const$76, fi, constants$0.const$75, scope);
    }
    static loadImage_t ofAddress(MemorySegment addr, Arena arena) {
        MemorySegment symbol = addr.reinterpret(arena, null);
        return (java.lang.foreign.MemorySegment _path, java.lang.foreign.MemorySegment _name, java.lang.foreign.MemorySegment _id, java.lang.foreign.MemorySegment _w, java.lang.foreign.MemorySegment _h, java.lang.foreign.MemorySegment _colorType, java.lang.foreign.MemorySegment _alphaType, java.lang.foreign.MemorySegment _colorSpace, java.lang.foreign.MemorySegment _pixels, java.lang.foreign.MemorySegment _rowBytes) -> {
            try {
                return (boolean)constants$0.const$77.invokeExact(symbol, _path, _name, _id, _w, _h, _colorType, _alphaType, _colorSpace, _pixels, _rowBytes);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        };
    }
}


