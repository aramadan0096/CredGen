// Generated by jextract

package com.loadingbyte.credgen.natives.skiacapi;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct Path {
 *     unsigned char* verbs;
 *     int verbCount;
 *     float* points;
 *     int pointCount;
 *     _Bool isEvenOdd;
 * };
 * }
 */
public class Path {

    public static MemoryLayout $LAYOUT() {
        return constants$0.const$87;
    }
    public static VarHandle verbs$VH() {
        return constants$0.const$88;
    }
    /**
     * Getter for field:
     * {@snippet :
     * unsigned char* verbs;
     * }
     */
    public static MemorySegment verbs$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$0.const$88.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * unsigned char* verbs;
     * }
     */
    public static void verbs$set(MemorySegment seg, MemorySegment x) {
        constants$0.const$88.set(seg, x);
    }
    public static MemorySegment verbs$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$0.const$88.get(seg.asSlice(index*sizeof()));
    }
    public static void verbs$set(MemorySegment seg, long index, MemorySegment x) {
        constants$0.const$88.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle verbCount$VH() {
        return constants$0.const$89;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int verbCount;
     * }
     */
    public static int verbCount$get(MemorySegment seg) {
        return (int)constants$0.const$89.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int verbCount;
     * }
     */
    public static void verbCount$set(MemorySegment seg, int x) {
        constants$0.const$89.set(seg, x);
    }
    public static int verbCount$get(MemorySegment seg, long index) {
        return (int)constants$0.const$89.get(seg.asSlice(index*sizeof()));
    }
    public static void verbCount$set(MemorySegment seg, long index, int x) {
        constants$0.const$89.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle points$VH() {
        return constants$0.const$90;
    }
    /**
     * Getter for field:
     * {@snippet :
     * float* points;
     * }
     */
    public static MemorySegment points$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$0.const$90.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * float* points;
     * }
     */
    public static void points$set(MemorySegment seg, MemorySegment x) {
        constants$0.const$90.set(seg, x);
    }
    public static MemorySegment points$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$0.const$90.get(seg.asSlice(index*sizeof()));
    }
    public static void points$set(MemorySegment seg, long index, MemorySegment x) {
        constants$0.const$90.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle pointCount$VH() {
        return constants$0.const$91;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int pointCount;
     * }
     */
    public static int pointCount$get(MemorySegment seg) {
        return (int)constants$0.const$91.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int pointCount;
     * }
     */
    public static void pointCount$set(MemorySegment seg, int x) {
        constants$0.const$91.set(seg, x);
    }
    public static int pointCount$get(MemorySegment seg, long index) {
        return (int)constants$0.const$91.get(seg.asSlice(index*sizeof()));
    }
    public static void pointCount$set(MemorySegment seg, long index, int x) {
        constants$0.const$91.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle isEvenOdd$VH() {
        return constants$0.const$92;
    }
    /**
     * Getter for field:
     * {@snippet :
     * _Bool isEvenOdd;
     * }
     */
    public static boolean isEvenOdd$get(MemorySegment seg) {
        return (boolean)constants$0.const$92.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * _Bool isEvenOdd;
     * }
     */
    public static void isEvenOdd$set(MemorySegment seg, boolean x) {
        constants$0.const$92.set(seg, x);
    }
    public static boolean isEvenOdd$get(MemorySegment seg, long index) {
        return (boolean)constants$0.const$92.get(seg.asSlice(index*sizeof()));
    }
    public static void isEvenOdd$set(MemorySegment seg, long index, boolean x) {
        constants$0.const$92.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, Arena arena) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, arena); }
}


