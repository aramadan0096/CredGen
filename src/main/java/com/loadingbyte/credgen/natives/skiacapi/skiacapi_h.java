// Generated by jextract

package com.loadingbyte.credgen.natives.skiacapi;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
public class skiacapi_h  {

    public static final OfByte C_CHAR = JAVA_BYTE;
    public static final OfShort C_SHORT = JAVA_SHORT;
    public static final OfInt C_INT = JAVA_INT;
    public static final OfLong C_LONG = JAVA_LONG;
    public static final OfLong C_LONG_LONG = JAVA_LONG;
    public static final OfFloat C_FLOAT = JAVA_FLOAT;
    public static final OfDouble C_DOUBLE = JAVA_DOUBLE;
    public static final AddressLayout C_POINTER = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * #define true 1
     * }
     */
    public static int true_() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define false 0
     * }
     */
    public static int false_() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * #define __bool_true_false_are_defined 1
     * }
     */
    public static int __bool_true_false_are_defined() {
        return (int)1L;
    }
    public static MethodHandle SkColorType_RGBA_F32$MH() {
        return RuntimeHelper.requireNonNull(constants$0.const$1,"SkColorType_RGBA_F32");
    }
    /**
     * {@snippet :
     * unsigned char SkColorType_RGBA_F32();
     * }
     */
    public static byte SkColorType_RGBA_F32() {
        var mh$ = SkColorType_RGBA_F32$MH();
        try {
            return (byte)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SkColorType_A16_unorm$MH() {
        return RuntimeHelper.requireNonNull(constants$0.const$2,"SkColorType_A16_unorm");
    }
    /**
     * {@snippet :
     * unsigned char SkColorType_A16_unorm();
     * }
     */
    public static byte SkColorType_A16_unorm() {
        var mh$ = SkColorType_A16_unorm$MH();
        try {
            return (byte)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SkAlphaType_Opaque$MH() {
        return RuntimeHelper.requireNonNull(constants$0.const$3,"SkAlphaType_Opaque");
    }
    /**
     * {@snippet :
     * unsigned char SkAlphaType_Opaque();
     * }
     */
    public static byte SkAlphaType_Opaque() {
        var mh$ = SkAlphaType_Opaque$MH();
        try {
            return (byte)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SkAlphaType_Premul$MH() {
        return RuntimeHelper.requireNonNull(constants$0.const$4,"SkAlphaType_Premul");
    }
    /**
     * {@snippet :
     * unsigned char SkAlphaType_Premul();
     * }
     */
    public static byte SkAlphaType_Premul() {
        var mh$ = SkAlphaType_Premul$MH();
        try {
            return (byte)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SkAlphaType_Unpremul$MH() {
        return RuntimeHelper.requireNonNull(constants$0.const$5,"SkAlphaType_Unpremul");
    }
    /**
     * {@snippet :
     * unsigned char SkAlphaType_Unpremul();
     * }
     */
    public static byte SkAlphaType_Unpremul() {
        var mh$ = SkAlphaType_Unpremul$MH();
        try {
            return (byte)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SkTileMode_Clamp$MH() {
        return RuntimeHelper.requireNonNull(constants$0.const$6,"SkTileMode_Clamp");
    }
    /**
     * {@snippet :
     * unsigned char SkTileMode_Clamp();
     * }
     */
    public static byte SkTileMode_Clamp() {
        var mh$ = SkTileMode_Clamp$MH();
        try {
            return (byte)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SkTileMode_Decal$MH() {
        return RuntimeHelper.requireNonNull(constants$0.const$7,"SkTileMode_Decal");
    }
    /**
     * {@snippet :
     * unsigned char SkTileMode_Decal();
     * }
     */
    public static byte SkTileMode_Decal() {
        var mh$ = SkTileMode_Decal$MH();
        try {
            return (byte)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SkFilterMode_Nearest$MH() {
        return RuntimeHelper.requireNonNull(constants$0.const$8,"SkFilterMode_Nearest");
    }
    /**
     * {@snippet :
     * unsigned char SkFilterMode_Nearest();
     * }
     */
    public static byte SkFilterMode_Nearest() {
        var mh$ = SkFilterMode_Nearest$MH();
        try {
            return (byte)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SkFilterMode_Linear$MH() {
        return RuntimeHelper.requireNonNull(constants$0.const$9,"SkFilterMode_Linear");
    }
    /**
     * {@snippet :
     * unsigned char SkFilterMode_Linear();
     * }
     */
    public static byte SkFilterMode_Linear() {
        var mh$ = SkFilterMode_Linear$MH();
        try {
            return (byte)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SkPathVerb_Move$MH() {
        return RuntimeHelper.requireNonNull(constants$0.const$10,"SkPathVerb_Move");
    }
    /**
     * {@snippet :
     * unsigned char SkPathVerb_Move();
     * }
     */
    public static byte SkPathVerb_Move() {
        var mh$ = SkPathVerb_Move$MH();
        try {
            return (byte)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SkPathVerb_Line$MH() {
        return RuntimeHelper.requireNonNull(constants$0.const$11,"SkPathVerb_Line");
    }
    /**
     * {@snippet :
     * unsigned char SkPathVerb_Line();
     * }
     */
    public static byte SkPathVerb_Line() {
        var mh$ = SkPathVerb_Line$MH();
        try {
            return (byte)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SkPathVerb_Quad$MH() {
        return RuntimeHelper.requireNonNull(constants$0.const$12,"SkPathVerb_Quad");
    }
    /**
     * {@snippet :
     * unsigned char SkPathVerb_Quad();
     * }
     */
    public static byte SkPathVerb_Quad() {
        var mh$ = SkPathVerb_Quad$MH();
        try {
            return (byte)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SkPathVerb_Cubic$MH() {
        return RuntimeHelper.requireNonNull(constants$0.const$13,"SkPathVerb_Cubic");
    }
    /**
     * {@snippet :
     * unsigned char SkPathVerb_Cubic();
     * }
     */
    public static byte SkPathVerb_Cubic() {
        var mh$ = SkPathVerb_Cubic$MH();
        try {
            return (byte)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SkPathVerb_Close$MH() {
        return RuntimeHelper.requireNonNull(constants$0.const$14,"SkPathVerb_Close");
    }
    /**
     * {@snippet :
     * unsigned char SkPathVerb_Close();
     * }
     */
    public static byte SkPathVerb_Close() {
        var mh$ = SkPathVerb_Close$MH();
        try {
            return (byte)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SkPaintCap_Butt$MH() {
        return RuntimeHelper.requireNonNull(constants$0.const$15,"SkPaintCap_Butt");
    }
    /**
     * {@snippet :
     * unsigned char SkPaintCap_Butt();
     * }
     */
    public static byte SkPaintCap_Butt() {
        var mh$ = SkPaintCap_Butt$MH();
        try {
            return (byte)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SkPaintCap_Round$MH() {
        return RuntimeHelper.requireNonNull(constants$0.const$16,"SkPaintCap_Round");
    }
    /**
     * {@snippet :
     * unsigned char SkPaintCap_Round();
     * }
     */
    public static byte SkPaintCap_Round() {
        var mh$ = SkPaintCap_Round$MH();
        try {
            return (byte)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SkPaintCap_Square$MH() {
        return RuntimeHelper.requireNonNull(constants$0.const$17,"SkPaintCap_Square");
    }
    /**
     * {@snippet :
     * unsigned char SkPaintCap_Square();
     * }
     */
    public static byte SkPaintCap_Square() {
        var mh$ = SkPaintCap_Square$MH();
        try {
            return (byte)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SkPaintJoin_Miter$MH() {
        return RuntimeHelper.requireNonNull(constants$0.const$18,"SkPaintJoin_Miter");
    }
    /**
     * {@snippet :
     * unsigned char SkPaintJoin_Miter();
     * }
     */
    public static byte SkPaintJoin_Miter() {
        var mh$ = SkPaintJoin_Miter$MH();
        try {
            return (byte)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SkPaintJoin_Round$MH() {
        return RuntimeHelper.requireNonNull(constants$0.const$19,"SkPaintJoin_Round");
    }
    /**
     * {@snippet :
     * unsigned char SkPaintJoin_Round();
     * }
     */
    public static byte SkPaintJoin_Round() {
        var mh$ = SkPaintJoin_Round$MH();
        try {
            return (byte)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SkPaintJoin_Bevel$MH() {
        return RuntimeHelper.requireNonNull(constants$0.const$20,"SkPaintJoin_Bevel");
    }
    /**
     * {@snippet :
     * unsigned char SkPaintJoin_Bevel();
     * }
     */
    public static byte SkPaintJoin_Bevel() {
        var mh$ = SkPaintJoin_Bevel$MH();
        try {
            return (byte)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SkBlendMode_Clear$MH() {
        return RuntimeHelper.requireNonNull(constants$0.const$21,"SkBlendMode_Clear");
    }
    /**
     * {@snippet :
     * unsigned char SkBlendMode_Clear();
     * }
     */
    public static byte SkBlendMode_Clear() {
        var mh$ = SkBlendMode_Clear$MH();
        try {
            return (byte)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SkBlendMode_Src$MH() {
        return RuntimeHelper.requireNonNull(constants$0.const$22,"SkBlendMode_Src");
    }
    /**
     * {@snippet :
     * unsigned char SkBlendMode_Src();
     * }
     */
    public static byte SkBlendMode_Src() {
        var mh$ = SkBlendMode_Src$MH();
        try {
            return (byte)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SkBlendMode_Dst$MH() {
        return RuntimeHelper.requireNonNull(constants$0.const$23,"SkBlendMode_Dst");
    }
    /**
     * {@snippet :
     * unsigned char SkBlendMode_Dst();
     * }
     */
    public static byte SkBlendMode_Dst() {
        var mh$ = SkBlendMode_Dst$MH();
        try {
            return (byte)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SkBlendMode_SrcOver$MH() {
        return RuntimeHelper.requireNonNull(constants$0.const$24,"SkBlendMode_SrcOver");
    }
    /**
     * {@snippet :
     * unsigned char SkBlendMode_SrcOver();
     * }
     */
    public static byte SkBlendMode_SrcOver() {
        var mh$ = SkBlendMode_SrcOver$MH();
        try {
            return (byte)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SkBlendMode_DstOver$MH() {
        return RuntimeHelper.requireNonNull(constants$0.const$25,"SkBlendMode_DstOver");
    }
    /**
     * {@snippet :
     * unsigned char SkBlendMode_DstOver();
     * }
     */
    public static byte SkBlendMode_DstOver() {
        var mh$ = SkBlendMode_DstOver$MH();
        try {
            return (byte)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SkBlendMode_SrcIn$MH() {
        return RuntimeHelper.requireNonNull(constants$0.const$26,"SkBlendMode_SrcIn");
    }
    /**
     * {@snippet :
     * unsigned char SkBlendMode_SrcIn();
     * }
     */
    public static byte SkBlendMode_SrcIn() {
        var mh$ = SkBlendMode_SrcIn$MH();
        try {
            return (byte)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SkBlendMode_DstIn$MH() {
        return RuntimeHelper.requireNonNull(constants$0.const$27,"SkBlendMode_DstIn");
    }
    /**
     * {@snippet :
     * unsigned char SkBlendMode_DstIn();
     * }
     */
    public static byte SkBlendMode_DstIn() {
        var mh$ = SkBlendMode_DstIn$MH();
        try {
            return (byte)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SkBlendMode_SrcOut$MH() {
        return RuntimeHelper.requireNonNull(constants$0.const$28,"SkBlendMode_SrcOut");
    }
    /**
     * {@snippet :
     * unsigned char SkBlendMode_SrcOut();
     * }
     */
    public static byte SkBlendMode_SrcOut() {
        var mh$ = SkBlendMode_SrcOut$MH();
        try {
            return (byte)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SkBlendMode_DstOut$MH() {
        return RuntimeHelper.requireNonNull(constants$0.const$29,"SkBlendMode_DstOut");
    }
    /**
     * {@snippet :
     * unsigned char SkBlendMode_DstOut();
     * }
     */
    public static byte SkBlendMode_DstOut() {
        var mh$ = SkBlendMode_DstOut$MH();
        try {
            return (byte)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SkBlendMode_SrcATop$MH() {
        return RuntimeHelper.requireNonNull(constants$0.const$30,"SkBlendMode_SrcATop");
    }
    /**
     * {@snippet :
     * unsigned char SkBlendMode_SrcATop();
     * }
     */
    public static byte SkBlendMode_SrcATop() {
        var mh$ = SkBlendMode_SrcATop$MH();
        try {
            return (byte)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SkBlendMode_DstATop$MH() {
        return RuntimeHelper.requireNonNull(constants$0.const$31,"SkBlendMode_DstATop");
    }
    /**
     * {@snippet :
     * unsigned char SkBlendMode_DstATop();
     * }
     */
    public static byte SkBlendMode_DstATop() {
        var mh$ = SkBlendMode_DstATop$MH();
        try {
            return (byte)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SkBlendMode_Xor$MH() {
        return RuntimeHelper.requireNonNull(constants$0.const$32,"SkBlendMode_Xor");
    }
    /**
     * {@snippet :
     * unsigned char SkBlendMode_Xor();
     * }
     */
    public static byte SkBlendMode_Xor() {
        var mh$ = SkBlendMode_Xor$MH();
        try {
            return (byte)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SkBlendMode_Plus$MH() {
        return RuntimeHelper.requireNonNull(constants$0.const$33,"SkBlendMode_Plus");
    }
    /**
     * {@snippet :
     * unsigned char SkBlendMode_Plus();
     * }
     */
    public static byte SkBlendMode_Plus() {
        var mh$ = SkBlendMode_Plus$MH();
        try {
            return (byte)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SkBlendMode_Modulate$MH() {
        return RuntimeHelper.requireNonNull(constants$0.const$34,"SkBlendMode_Modulate");
    }
    /**
     * {@snippet :
     * unsigned char SkBlendMode_Modulate();
     * }
     */
    public static byte SkBlendMode_Modulate() {
        var mh$ = SkBlendMode_Modulate$MH();
        try {
            return (byte)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SkBlendMode_Screen$MH() {
        return RuntimeHelper.requireNonNull(constants$0.const$35,"SkBlendMode_Screen");
    }
    /**
     * {@snippet :
     * unsigned char SkBlendMode_Screen();
     * }
     */
    public static byte SkBlendMode_Screen() {
        var mh$ = SkBlendMode_Screen$MH();
        try {
            return (byte)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SkBlendMode_Overlay$MH() {
        return RuntimeHelper.requireNonNull(constants$0.const$36,"SkBlendMode_Overlay");
    }
    /**
     * {@snippet :
     * unsigned char SkBlendMode_Overlay();
     * }
     */
    public static byte SkBlendMode_Overlay() {
        var mh$ = SkBlendMode_Overlay$MH();
        try {
            return (byte)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SkBlendMode_Darken$MH() {
        return RuntimeHelper.requireNonNull(constants$0.const$37,"SkBlendMode_Darken");
    }
    /**
     * {@snippet :
     * unsigned char SkBlendMode_Darken();
     * }
     */
    public static byte SkBlendMode_Darken() {
        var mh$ = SkBlendMode_Darken$MH();
        try {
            return (byte)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SkBlendMode_Lighten$MH() {
        return RuntimeHelper.requireNonNull(constants$0.const$38,"SkBlendMode_Lighten");
    }
    /**
     * {@snippet :
     * unsigned char SkBlendMode_Lighten();
     * }
     */
    public static byte SkBlendMode_Lighten() {
        var mh$ = SkBlendMode_Lighten$MH();
        try {
            return (byte)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SkBlendMode_ColorDodge$MH() {
        return RuntimeHelper.requireNonNull(constants$0.const$39,"SkBlendMode_ColorDodge");
    }
    /**
     * {@snippet :
     * unsigned char SkBlendMode_ColorDodge();
     * }
     */
    public static byte SkBlendMode_ColorDodge() {
        var mh$ = SkBlendMode_ColorDodge$MH();
        try {
            return (byte)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SkBlendMode_ColorBurn$MH() {
        return RuntimeHelper.requireNonNull(constants$0.const$40,"SkBlendMode_ColorBurn");
    }
    /**
     * {@snippet :
     * unsigned char SkBlendMode_ColorBurn();
     * }
     */
    public static byte SkBlendMode_ColorBurn() {
        var mh$ = SkBlendMode_ColorBurn$MH();
        try {
            return (byte)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SkBlendMode_HardLight$MH() {
        return RuntimeHelper.requireNonNull(constants$0.const$41,"SkBlendMode_HardLight");
    }
    /**
     * {@snippet :
     * unsigned char SkBlendMode_HardLight();
     * }
     */
    public static byte SkBlendMode_HardLight() {
        var mh$ = SkBlendMode_HardLight$MH();
        try {
            return (byte)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SkBlendMode_SoftLight$MH() {
        return RuntimeHelper.requireNonNull(constants$0.const$42,"SkBlendMode_SoftLight");
    }
    /**
     * {@snippet :
     * unsigned char SkBlendMode_SoftLight();
     * }
     */
    public static byte SkBlendMode_SoftLight() {
        var mh$ = SkBlendMode_SoftLight$MH();
        try {
            return (byte)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SkBlendMode_Difference$MH() {
        return RuntimeHelper.requireNonNull(constants$0.const$43,"SkBlendMode_Difference");
    }
    /**
     * {@snippet :
     * unsigned char SkBlendMode_Difference();
     * }
     */
    public static byte SkBlendMode_Difference() {
        var mh$ = SkBlendMode_Difference$MH();
        try {
            return (byte)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SkBlendMode_Exclusion$MH() {
        return RuntimeHelper.requireNonNull(constants$0.const$44,"SkBlendMode_Exclusion");
    }
    /**
     * {@snippet :
     * unsigned char SkBlendMode_Exclusion();
     * }
     */
    public static byte SkBlendMode_Exclusion() {
        var mh$ = SkBlendMode_Exclusion$MH();
        try {
            return (byte)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SkBlendMode_Multiply$MH() {
        return RuntimeHelper.requireNonNull(constants$0.const$45,"SkBlendMode_Multiply");
    }
    /**
     * {@snippet :
     * unsigned char SkBlendMode_Multiply();
     * }
     */
    public static byte SkBlendMode_Multiply() {
        var mh$ = SkBlendMode_Multiply$MH();
        try {
            return (byte)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SkBlendMode_Hue$MH() {
        return RuntimeHelper.requireNonNull(constants$0.const$46,"SkBlendMode_Hue");
    }
    /**
     * {@snippet :
     * unsigned char SkBlendMode_Hue();
     * }
     */
    public static byte SkBlendMode_Hue() {
        var mh$ = SkBlendMode_Hue$MH();
        try {
            return (byte)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SkBlendMode_Saturation$MH() {
        return RuntimeHelper.requireNonNull(constants$0.const$47,"SkBlendMode_Saturation");
    }
    /**
     * {@snippet :
     * unsigned char SkBlendMode_Saturation();
     * }
     */
    public static byte SkBlendMode_Saturation() {
        var mh$ = SkBlendMode_Saturation$MH();
        try {
            return (byte)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SkBlendMode_Color$MH() {
        return RuntimeHelper.requireNonNull(constants$0.const$48,"SkBlendMode_Color");
    }
    /**
     * {@snippet :
     * unsigned char SkBlendMode_Color();
     * }
     */
    public static byte SkBlendMode_Color() {
        var mh$ = SkBlendMode_Color$MH();
        try {
            return (byte)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SkBlendMode_Luminosity$MH() {
        return RuntimeHelper.requireNonNull(constants$0.const$49,"SkBlendMode_Luminosity");
    }
    /**
     * {@snippet :
     * unsigned char SkBlendMode_Luminosity();
     * }
     */
    public static byte SkBlendMode_Luminosity() {
        var mh$ = SkBlendMode_Luminosity$MH();
        try {
            return (byte)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SkGradientShaderInterpolationColorSpace_Destination$MH() {
        return RuntimeHelper.requireNonNull(constants$0.const$50,"SkGradientShaderInterpolationColorSpace_Destination");
    }
    /**
     * {@snippet :
     * unsigned char SkGradientShaderInterpolationColorSpace_Destination();
     * }
     */
    public static byte SkGradientShaderInterpolationColorSpace_Destination() {
        var mh$ = SkGradientShaderInterpolationColorSpace_Destination$MH();
        try {
            return (byte)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SkGradientShaderInterpolationColorSpace_OKLab$MH() {
        return RuntimeHelper.requireNonNull(constants$0.const$51,"SkGradientShaderInterpolationColorSpace_OKLab");
    }
    /**
     * {@snippet :
     * unsigned char SkGradientShaderInterpolationColorSpace_OKLab();
     * }
     */
    public static byte SkGradientShaderInterpolationColorSpace_OKLab() {
        var mh$ = SkGradientShaderInterpolationColorSpace_OKLab$MH();
        try {
            return (byte)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SkGradientShaderInterpolationColorSpace_SRGB$MH() {
        return RuntimeHelper.requireNonNull(constants$0.const$52,"SkGradientShaderInterpolationColorSpace_SRGB");
    }
    /**
     * {@snippet :
     * unsigned char SkGradientShaderInterpolationColorSpace_SRGB();
     * }
     */
    public static byte SkGradientShaderInterpolationColorSpace_SRGB() {
        var mh$ = SkGradientShaderInterpolationColorSpace_SRGB$MH();
        try {
            return (byte)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SkNamedTransferFn_SRGB$MH() {
        return RuntimeHelper.requireNonNull(constants$0.const$54,"SkNamedTransferFn_SRGB");
    }
    /**
     * {@snippet :
     * float* SkNamedTransferFn_SRGB();
     * }
     */
    public static MemorySegment SkNamedTransferFn_SRGB() {
        var mh$ = SkNamedTransferFn_SRGB$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SkNamedTransferFn_Rec2020$MH() {
        return RuntimeHelper.requireNonNull(constants$0.const$55,"SkNamedTransferFn_Rec2020");
    }
    /**
     * {@snippet :
     * float* SkNamedTransferFn_Rec2020();
     * }
     */
    public static MemorySegment SkNamedTransferFn_Rec2020() {
        var mh$ = SkNamedTransferFn_Rec2020$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SkNamedTransferFn_PQ$MH() {
        return RuntimeHelper.requireNonNull(constants$0.const$56,"SkNamedTransferFn_PQ");
    }
    /**
     * {@snippet :
     * float* SkNamedTransferFn_PQ();
     * }
     */
    public static MemorySegment SkNamedTransferFn_PQ() {
        var mh$ = SkNamedTransferFn_PQ$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SkNamedTransferFn_HLG$MH() {
        return RuntimeHelper.requireNonNull(constants$0.const$57,"SkNamedTransferFn_HLG");
    }
    /**
     * {@snippet :
     * float* SkNamedTransferFn_HLG();
     * }
     */
    public static MemorySegment SkNamedTransferFn_HLG() {
        var mh$ = SkNamedTransferFn_HLG$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SkNamedGamut_SRGB$MH() {
        return RuntimeHelper.requireNonNull(constants$0.const$58,"SkNamedGamut_SRGB");
    }
    /**
     * {@snippet :
     * float* SkNamedGamut_SRGB();
     * }
     */
    public static MemorySegment SkNamedGamut_SRGB() {
        var mh$ = SkNamedGamut_SRGB$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SkNamedGamut_AdobeRGB$MH() {
        return RuntimeHelper.requireNonNull(constants$0.const$59,"SkNamedGamut_AdobeRGB");
    }
    /**
     * {@snippet :
     * float* SkNamedGamut_AdobeRGB();
     * }
     */
    public static MemorySegment SkNamedGamut_AdobeRGB() {
        var mh$ = SkNamedGamut_AdobeRGB$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SkNamedGamut_DisplayP3$MH() {
        return RuntimeHelper.requireNonNull(constants$0.const$60,"SkNamedGamut_DisplayP3");
    }
    /**
     * {@snippet :
     * float* SkNamedGamut_DisplayP3();
     * }
     */
    public static MemorySegment SkNamedGamut_DisplayP3() {
        var mh$ = SkNamedGamut_DisplayP3$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SkNamedGamut_Rec2020$MH() {
        return RuntimeHelper.requireNonNull(constants$0.const$61,"SkNamedGamut_Rec2020");
    }
    /**
     * {@snippet :
     * float* SkNamedGamut_Rec2020();
     * }
     */
    public static MemorySegment SkNamedGamut_Rec2020() {
        var mh$ = SkNamedGamut_Rec2020$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SkRefCnt_unref$MH() {
        return RuntimeHelper.requireNonNull(constants$0.const$63,"SkRefCnt_unref");
    }
    /**
     * {@snippet :
     * void SkRefCnt_unref(SkRefCnt* object);
     * }
     */
    public static void SkRefCnt_unref(MemorySegment object) {
        var mh$ = SkRefCnt_unref$MH();
        try {
            mh$.invokeExact(object);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SkData_unref$MH() {
        return RuntimeHelper.requireNonNull(constants$0.const$64,"SkData_unref");
    }
    /**
     * {@snippet :
     * void SkData_unref(SkData* data);
     * }
     */
    public static void SkData_unref(MemorySegment data) {
        var mh$ = SkData_unref$MH();
        try {
            mh$.invokeExact(data);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SkData_size$MH() {
        return RuntimeHelper.requireNonNull(constants$0.const$66,"SkData_size");
    }
    /**
     * {@snippet :
     * long long SkData_size(SkData* data);
     * }
     */
    public static long SkData_size(MemorySegment data) {
        var mh$ = SkData_size$MH();
        try {
            return (long)mh$.invokeExact(data);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SkData_data$MH() {
        return RuntimeHelper.requireNonNull(constants$0.const$68,"SkData_data");
    }
    /**
     * {@snippet :
     * void* SkData_data(SkData* data);
     * }
     */
    public static MemorySegment SkData_data(MemorySegment data) {
        var mh$ = SkData_data$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(data);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SkDynamicMemoryWStream_New$MH() {
        return RuntimeHelper.requireNonNull(constants$0.const$69,"SkDynamicMemoryWStream_New");
    }
    /**
     * {@snippet :
     * SkDynamicMemoryWStream* SkDynamicMemoryWStream_New();
     * }
     */
    public static MemorySegment SkDynamicMemoryWStream_New() {
        var mh$ = SkDynamicMemoryWStream_New$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SkDynamicMemoryWStream_delete$MH() {
        return RuntimeHelper.requireNonNull(constants$0.const$70,"SkDynamicMemoryWStream_delete");
    }
    /**
     * {@snippet :
     * void SkDynamicMemoryWStream_delete(SkDynamicMemoryWStream* stream);
     * }
     */
    public static void SkDynamicMemoryWStream_delete(MemorySegment stream) {
        var mh$ = SkDynamicMemoryWStream_delete$MH();
        try {
            mh$.invokeExact(stream);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SkDynamicMemoryWStream_detachAsData$MH() {
        return RuntimeHelper.requireNonNull(constants$0.const$71,"SkDynamicMemoryWStream_detachAsData");
    }
    /**
     * {@snippet :
     * SkData* SkDynamicMemoryWStream_detachAsData(SkDynamicMemoryWStream* stream);
     * }
     */
    public static MemorySegment SkDynamicMemoryWStream_detachAsData(MemorySegment stream) {
        var mh$ = SkDynamicMemoryWStream_detachAsData$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(stream);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SkColorSpace_MakeRGB$MH() {
        return RuntimeHelper.requireNonNull(constants$0.const$73,"SkColorSpace_MakeRGB");
    }
    /**
     * {@snippet :
     * SkColorSpace* SkColorSpace_MakeRGB(float g, float a, float b, float c, float d, float e, float f, float m00, float m01, float m02, float m10, float m11, float m12, float m20, float m21, float m22);
     * }
     */
    public static MemorySegment SkColorSpace_MakeRGB(float g, float a, float b, float c, float d, float e, float f, float m00, float m01, float m02, float m10, float m11, float m12, float m20, float m21, float m22) {
        var mh$ = SkColorSpace_MakeRGB$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(g, a, b, c, d, e, f, m00, m01, m02, m10, m11, m12, m20, m21, m22);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SkICC_SkWriteICCProfile$MH() {
        return RuntimeHelper.requireNonNull(constants$0.const$74,"SkICC_SkWriteICCProfile");
    }
    /**
     * {@snippet :
     * SkData* SkICC_SkWriteICCProfile(float g, float a, float b, float c, float d, float e, float f, float m00, float m01, float m02, float m10, float m11, float m12, float m20, float m21, float m22);
     * }
     */
    public static MemorySegment SkICC_SkWriteICCProfile(float g, float a, float b, float c, float d, float e, float f, float m00, float m01, float m02, float m10, float m11, float m12, float m20, float m21, float m22) {
        var mh$ = SkICC_SkWriteICCProfile$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(g, a, b, c, d, e, f, m00, m01, m02, m10, m11, m12, m20, m21, m22);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SkSVGDOM_Make$MH() {
        return RuntimeHelper.requireNonNull(constants$0.const$79,"SkSVGDOM_Make");
    }
    /**
     * {@snippet :
     * SkSVGDOM* SkSVGDOM_Make(char* str, long long len, loadImage_t loadImage);
     * }
     */
    public static MemorySegment SkSVGDOM_Make(MemorySegment str, long len, MemorySegment loadImage) {
        var mh$ = SkSVGDOM_Make$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(str, len, loadImage);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SkSVGDOM_containerSize$MH() {
        return RuntimeHelper.requireNonNull(constants$0.const$81,"SkSVGDOM_containerSize");
    }
    /**
     * {@snippet :
     * void SkSVGDOM_containerSize(SkSVGDOM* dom, float wh[2]);
     * }
     */
    public static void SkSVGDOM_containerSize(MemorySegment dom, MemorySegment wh) {
        var mh$ = SkSVGDOM_containerSize$MH();
        try {
            mh$.invokeExact(dom, wh);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SkSVGDOM_setContainerSize$MH() {
        return RuntimeHelper.requireNonNull(constants$0.const$83,"SkSVGDOM_setContainerSize");
    }
    /**
     * {@snippet :
     * void SkSVGDOM_setContainerSize(SkSVGDOM* dom, float w, float h);
     * }
     */
    public static void SkSVGDOM_setContainerSize(MemorySegment dom, float w, float h) {
        var mh$ = SkSVGDOM_setContainerSize$MH();
        try {
            mh$.invokeExact(dom, w, h);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SkSVGDOM_getViewBox$MH() {
        return RuntimeHelper.requireNonNull(constants$0.const$85,"SkSVGDOM_getViewBox");
    }
    /**
     * {@snippet :
     * _Bool SkSVGDOM_getViewBox(SkSVGDOM* dom, float box[4]);
     * }
     */
    public static boolean SkSVGDOM_getViewBox(MemorySegment dom, MemorySegment box) {
        var mh$ = SkSVGDOM_getViewBox$MH();
        try {
            return (boolean)mh$.invokeExact(dom, box);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SkSVGDOM_render$MH() {
        return RuntimeHelper.requireNonNull(constants$0.const$86,"SkSVGDOM_render");
    }
    /**
     * {@snippet :
     * void SkSVGDOM_render(SkSVGDOM* dom, SkCanvas* canvas);
     * }
     */
    public static void SkSVGDOM_render(MemorySegment dom, MemorySegment canvas) {
        var mh$ = SkSVGDOM_render$MH();
        try {
            mh$.invokeExact(dom, canvas);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SkCanvas_MakeRasterDirect$MH() {
        return RuntimeHelper.requireNonNull(constants$0.const$94,"SkCanvas_MakeRasterDirect");
    }
    /**
     * {@snippet :
     * SkCanvas* SkCanvas_MakeRasterDirect(int w, int h, unsigned char colorType, unsigned char alphaType, SkColorSpace* colorSpace, void* pixels, long long rowBytes);
     * }
     */
    public static MemorySegment SkCanvas_MakeRasterDirect(int w, int h, byte colorType, byte alphaType, MemorySegment colorSpace, MemorySegment pixels, long rowBytes) {
        var mh$ = SkCanvas_MakeRasterDirect$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(w, h, colorType, alphaType, colorSpace, pixels, rowBytes);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SkSVGCanvas_Make$MH() {
        return RuntimeHelper.requireNonNull(constants$0.const$96,"SkSVGCanvas_Make");
    }
    /**
     * {@snippet :
     * SkCanvas* SkSVGCanvas_Make(SkDynamicMemoryWStream* stream, float x, float y, float w, float h);
     * }
     */
    public static MemorySegment SkSVGCanvas_Make(MemorySegment stream, float x, float y, float w, float h) {
        var mh$ = SkSVGCanvas_Make$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(stream, x, y, w, h);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SkCanvas_delete$MH() {
        return RuntimeHelper.requireNonNull(constants$0.const$97,"SkCanvas_delete");
    }
    /**
     * {@snippet :
     * void SkCanvas_delete(SkCanvas* canvas);
     * }
     */
    public static void SkCanvas_delete(MemorySegment canvas) {
        var mh$ = SkCanvas_delete$MH();
        try {
            mh$.invokeExact(canvas);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SkPDF_MakeDocument$MH() {
        return RuntimeHelper.requireNonNull(constants$0.const$98,"SkPDF_MakeDocument");
    }
    /**
     * {@snippet :
     * SkDocument* SkPDF_MakeDocument(SkDynamicMemoryWStream* stream);
     * }
     */
    public static MemorySegment SkPDF_MakeDocument(MemorySegment stream) {
        var mh$ = SkPDF_MakeDocument$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(stream);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SkDocument_beginPage$MH() {
        return RuntimeHelper.requireNonNull(constants$0.const$100,"SkDocument_beginPage");
    }
    /**
     * {@snippet :
     * SkCanvas* SkDocument_beginPage(SkDocument* document, float w, float h);
     * }
     */
    public static MemorySegment SkDocument_beginPage(MemorySegment document, float w, float h) {
        var mh$ = SkDocument_beginPage$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(document, w, h);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SkDocument_endPage$MH() {
        return RuntimeHelper.requireNonNull(constants$0.const$101,"SkDocument_endPage");
    }
    /**
     * {@snippet :
     * void SkDocument_endPage(SkDocument* document);
     * }
     */
    public static void SkDocument_endPage(MemorySegment document) {
        var mh$ = SkDocument_endPage$MH();
        try {
            mh$.invokeExact(document);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SkCanvas_save$MH() {
        return RuntimeHelper.requireNonNull(constants$0.const$102,"SkCanvas_save");
    }
    /**
     * {@snippet :
     * void SkCanvas_save(SkCanvas* canvas);
     * }
     */
    public static void SkCanvas_save(MemorySegment canvas) {
        var mh$ = SkCanvas_save$MH();
        try {
            mh$.invokeExact(canvas);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SkCanvas_saveLayer$MH() {
        return RuntimeHelper.requireNonNull(constants$0.const$104,"SkCanvas_saveLayer");
    }
    /**
     * {@snippet :
     * void SkCanvas_saveLayer(SkCanvas* canvas, _Bool passBounds, float x, float y, float w, float h, SkPaint* paint);
     * }
     */
    public static void SkCanvas_saveLayer(MemorySegment canvas, boolean passBounds, float x, float y, float w, float h, MemorySegment paint) {
        var mh$ = SkCanvas_saveLayer$MH();
        try {
            mh$.invokeExact(canvas, passBounds, x, y, w, h, paint);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SkCanvas_restore$MH() {
        return RuntimeHelper.requireNonNull(constants$0.const$105,"SkCanvas_restore");
    }
    /**
     * {@snippet :
     * void SkCanvas_restore(SkCanvas* canvas);
     * }
     */
    public static void SkCanvas_restore(MemorySegment canvas) {
        var mh$ = SkCanvas_restore$MH();
        try {
            mh$.invokeExact(canvas);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SkCanvas_setMatrix$MH() {
        return RuntimeHelper.requireNonNull(constants$0.const$107,"SkCanvas_setMatrix");
    }
    /**
     * {@snippet :
     * void SkCanvas_setMatrix(SkCanvas* canvas, float m00, float m10, float m01, float m11, float m02, float m12);
     * }
     */
    public static void SkCanvas_setMatrix(MemorySegment canvas, float m00, float m10, float m01, float m11, float m02, float m12) {
        var mh$ = SkCanvas_setMatrix$MH();
        try {
            mh$.invokeExact(canvas, m00, m10, m01, m11, m02, m12);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SkCanvas_clipRect$MH() {
        return RuntimeHelper.requireNonNull(constants$0.const$109,"SkCanvas_clipRect");
    }
    /**
     * {@snippet :
     * void SkCanvas_clipRect(SkCanvas* canvas, float x, float y, float w, float h, _Bool doAntiAlias);
     * }
     */
    public static void SkCanvas_clipRect(MemorySegment canvas, float x, float y, float w, float h, boolean doAntiAlias) {
        var mh$ = SkCanvas_clipRect$MH();
        try {
            mh$.invokeExact(canvas, x, y, w, h, doAntiAlias);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SkCanvas_clipPath$MH() {
        return RuntimeHelper.requireNonNull(constants$0.const$111,"SkCanvas_clipPath");
    }
    /**
     * {@snippet :
     * void SkCanvas_clipPath(SkCanvas* canvas, Path* path, _Bool doAntiAlias);
     * }
     */
    public static void SkCanvas_clipPath(MemorySegment canvas, MemorySegment path, boolean doAntiAlias) {
        var mh$ = SkCanvas_clipPath$MH();
        try {
            mh$.invokeExact(canvas, path, doAntiAlias);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SkCanvas_drawPath$MH() {
        return RuntimeHelper.requireNonNull(constants$0.const$113,"SkCanvas_drawPath");
    }
    /**
     * {@snippet :
     * void SkCanvas_drawPath(SkCanvas* canvas, Path* path, SkPaint* paint);
     * }
     */
    public static void SkCanvas_drawPath(MemorySegment canvas, MemorySegment path, MemorySegment paint) {
        var mh$ = SkCanvas_drawPath$MH();
        try {
            mh$.invokeExact(canvas, path, paint);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SkCanvas_drawImage$MH() {
        return RuntimeHelper.requireNonNull(constants$0.const$115,"SkCanvas_drawImage");
    }
    /**
     * {@snippet :
     * void SkCanvas_drawImage(SkCanvas* canvas, int w, int h, unsigned char colorType, unsigned char alphaType, SkColorSpace* colorSpace, void* pixels, long long rowBytes, float x, float y, unsigned char filterMode, SkPaint* paint);
     * }
     */
    public static void SkCanvas_drawImage(MemorySegment canvas, int w, int h, byte colorType, byte alphaType, MemorySegment colorSpace, MemorySegment pixels, long rowBytes, float x, float y, byte filterMode, MemorySegment paint) {
        var mh$ = SkCanvas_drawImage$MH();
        try {
            mh$.invokeExact(canvas, w, h, colorType, alphaType, colorSpace, pixels, rowBytes, x, y, filterMode, paint);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SkPaint_New$MH() {
        return RuntimeHelper.requireNonNull(constants$0.const$116,"SkPaint_New");
    }
    /**
     * {@snippet :
     * SkPaint* SkPaint_New();
     * }
     */
    public static MemorySegment SkPaint_New() {
        var mh$ = SkPaint_New$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SkPaint_delete$MH() {
        return RuntimeHelper.requireNonNull(constants$0.const$117,"SkPaint_delete");
    }
    /**
     * {@snippet :
     * void SkPaint_delete(SkPaint* paint);
     * }
     */
    public static void SkPaint_delete(MemorySegment paint) {
        var mh$ = SkPaint_delete$MH();
        try {
            mh$.invokeExact(paint);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SkPaint_setAntiAlias$MH() {
        return RuntimeHelper.requireNonNull(constants$0.const$119,"SkPaint_setAntiAlias");
    }
    /**
     * {@snippet :
     * void SkPaint_setAntiAlias(SkPaint* paint, _Bool antiAlias);
     * }
     */
    public static void SkPaint_setAntiAlias(MemorySegment paint, boolean antiAlias) {
        var mh$ = SkPaint_setAntiAlias$MH();
        try {
            mh$.invokeExact(paint, antiAlias);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SkPaint_setStroke$MH() {
        return RuntimeHelper.requireNonNull(constants$0.const$120,"SkPaint_setStroke");
    }
    /**
     * {@snippet :
     * void SkPaint_setStroke(SkPaint* paint, _Bool stroke);
     * }
     */
    public static void SkPaint_setStroke(MemorySegment paint, boolean stroke) {
        var mh$ = SkPaint_setStroke$MH();
        try {
            mh$.invokeExact(paint, stroke);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SkPaint_setStrokeProperties$MH() {
        return RuntimeHelper.requireNonNull(constants$0.const$122,"SkPaint_setStrokeProperties");
    }
    /**
     * {@snippet :
     * void SkPaint_setStrokeProperties(SkPaint* paint, float width, unsigned char cap, unsigned char join, float miterlimit);
     * }
     */
    public static void SkPaint_setStrokeProperties(MemorySegment paint, float width, byte cap, byte join, float miterlimit) {
        var mh$ = SkPaint_setStrokeProperties$MH();
        try {
            mh$.invokeExact(paint, width, cap, join, miterlimit);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SkPaint_setColor$MH() {
        return RuntimeHelper.requireNonNull(constants$0.const$124,"SkPaint_setColor");
    }
    /**
     * {@snippet :
     * void SkPaint_setColor(SkPaint* paint, float c1, float c2, float c3, float a, SkColorSpace* colorSpace);
     * }
     */
    public static void SkPaint_setColor(MemorySegment paint, float c1, float c2, float c3, float a, MemorySegment colorSpace) {
        var mh$ = SkPaint_setColor$MH();
        try {
            mh$.invokeExact(paint, c1, c2, c3, a, colorSpace);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SkPaint_setAlpha$MH() {
        return RuntimeHelper.requireNonNull(constants$0.const$126,"SkPaint_setAlpha");
    }
    /**
     * {@snippet :
     * void SkPaint_setAlpha(SkPaint* paint, float a);
     * }
     */
    public static void SkPaint_setAlpha(MemorySegment paint, float a) {
        var mh$ = SkPaint_setAlpha$MH();
        try {
            mh$.invokeExact(paint, a);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SkPaint_setBlendMode$MH() {
        return RuntimeHelper.requireNonNull(constants$0.const$128,"SkPaint_setBlendMode");
    }
    /**
     * {@snippet :
     * void SkPaint_setBlendMode(SkPaint* paint, unsigned char blendMode);
     * }
     */
    public static void SkPaint_setBlendMode(MemorySegment paint, byte blendMode) {
        var mh$ = SkPaint_setBlendMode$MH();
        try {
            mh$.invokeExact(paint, blendMode);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SkPaint_setDashPathEffect$MH() {
        return RuntimeHelper.requireNonNull(constants$0.const$130,"SkPaint_setDashPathEffect");
    }
    /**
     * {@snippet :
     * void SkPaint_setDashPathEffect(SkPaint* paint, float intervals[], int count, float phase);
     * }
     */
    public static void SkPaint_setDashPathEffect(MemorySegment paint, MemorySegment intervals, int count, float phase) {
        var mh$ = SkPaint_setDashPathEffect$MH();
        try {
            mh$.invokeExact(paint, intervals, count, phase);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SkPaint_setShaderMaskFilter$MH() {
        return RuntimeHelper.requireNonNull(constants$0.const$131,"SkPaint_setShaderMaskFilter");
    }
    /**
     * {@snippet :
     * void SkPaint_setShaderMaskFilter(SkPaint* paint, SkShader* shader);
     * }
     */
    public static void SkPaint_setShaderMaskFilter(MemorySegment paint, MemorySegment shader) {
        var mh$ = SkPaint_setShaderMaskFilter$MH();
        try {
            mh$.invokeExact(paint, shader);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SkPaint_setShader$MH() {
        return RuntimeHelper.requireNonNull(constants$0.const$132,"SkPaint_setShader");
    }
    /**
     * {@snippet :
     * void SkPaint_setShader(SkPaint* paint, SkShader* shader);
     * }
     */
    public static void SkPaint_setShader(MemorySegment paint, MemorySegment shader) {
        var mh$ = SkPaint_setShader$MH();
        try {
            mh$.invokeExact(paint, shader);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SkPaint_setBlurImageFilter$MH() {
        return RuntimeHelper.requireNonNull(constants$0.const$133,"SkPaint_setBlurImageFilter");
    }
    /**
     * {@snippet :
     * void SkPaint_setBlurImageFilter(SkPaint* paint, float sigmaX, float sigmaY);
     * }
     */
    public static void SkPaint_setBlurImageFilter(MemorySegment paint, float sigmaX, float sigmaY) {
        var mh$ = SkPaint_setBlurImageFilter$MH();
        try {
            mh$.invokeExact(paint, sigmaX, sigmaY);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SkGradientShader_MakeLinear$MH() {
        return RuntimeHelper.requireNonNull(constants$0.const$135,"SkGradientShader_MakeLinear");
    }
    /**
     * {@snippet :
     * SkShader* SkGradientShader_MakeLinear(float x1, float y1, float x2, float y2, float colors[], SkColorSpace* colorSpace, float pos[], int count, unsigned char tileMode, unsigned char interpolationColorSpace);
     * }
     */
    public static MemorySegment SkGradientShader_MakeLinear(float x1, float y1, float x2, float y2, MemorySegment colors, MemorySegment colorSpace, MemorySegment pos, int count, byte tileMode, byte interpolationColorSpace) {
        var mh$ = SkGradientShader_MakeLinear$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(x1, y1, x2, y2, colors, colorSpace, pos, count, tileMode, interpolationColorSpace);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SkImage_makeShader$MH() {
        return RuntimeHelper.requireNonNull(constants$0.const$137,"SkImage_makeShader");
    }
    /**
     * {@snippet :
     * SkShader* SkImage_makeShader(int w, int h, unsigned char colorType, unsigned char alphaType, SkColorSpace* colorSpace, void* pixels, long long rowBytes, unsigned char tileModeX, unsigned char tileModeY, unsigned char filterMode, float m00, float m10, float m01, float m11, float m02, float m12);
     * }
     */
    public static MemorySegment SkImage_makeShader(int w, int h, byte colorType, byte alphaType, MemorySegment colorSpace, MemorySegment pixels, long rowBytes, byte tileModeX, byte tileModeY, byte filterMode, float m00, float m10, float m01, float m11, float m02, float m12) {
        var mh$ = SkImage_makeShader$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(w, h, colorType, alphaType, colorSpace, pixels, rowBytes, tileModeX, tileModeY, filterMode, m00, m10, m01, m11, m02, m12);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
}


